package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/types"
	"os"
	"path/filepath"
	"runtime"
	"slices"
	"strings"

	"github.com/dave/jennifer/jen"
	"github.com/rrgmc/litsql/internal/dialectgen/genutil"
	"golang.org/x/exp/maps"
	"golang.org/x/tools/go/packages"
)

var (
	dialect = flag.String("dialect", "", "dialect folder name (ex: psql, mysql, sqlite")
	dryRun  = flag.Bool("dry-run", false, "dry run")
)

func main() {
	flag.Parse()
	if len(*dialect) == 0 {
		fmt.Println("dialect is required")
		os.Exit(2)
	}

	err := runDialect()
	if err != nil {
		panic(err)
	}
}

func runDialect() error {
	for _, sdir := range []string{"sm", "im", "um", "dm"} {
		err := runPkg(sdir)
		if err != nil {
			return err
		}
	}
	return nil
}

func runPkg(sdir string) error {
	var sname string
	switch sdir {
	case "sm":
		sname = "Select"
	case "im":
		sname = "Insert"
	case "um":
		sname = "Update"
	case "dm":
		sname = "Delete"
	default:
		return fmt.Errorf("unknown sdir: %s", sdir)
	}

	sdialect := *dialect

	currentDir := getCurrentDir()
	ismDir := filepath.Clean(filepath.Join(currentDir, "..", "i"+sdir))
	dialectDir := filepath.Clean(filepath.Join(currentDir, "..", "..", "dialect"))
	curDialectDir := filepath.Join(dialectDir, sdialect)
	smDir := filepath.Join(curDialectDir, sdir)

	ispkg := "github.com/rrgmc/litsql/internal/i" + sdir
	isqpkg := "github.com/rrgmc/litsql/internal/isq"
	sqpkg := "github.com/rrgmc/litsql/sq"
	sqchainpkg := sqpkg + "/chain"
	sqmodpkg := sqpkg + "/mod"
	sdialectpkg := fmt.Sprintf("github.com/rrgmc/litsql/dialect/%s", sdialect)
	sdialecttagpkg := sdialectpkg + "/tag"

	lpkg, err := genutil.PkgInfoFromPath(
		ismDir, packages.NeedName|packages.NeedSyntax|packages.NeedTypes,
	)
	if err != nil {
		return fmt.Errorf("couldn't load source package: %s", err)
	}

	chains := map[string]bool{}

	f := jen.NewFile(sdir)
	f.PackageComment("// Code generated by \"litsql\"; DO NOT EDIT.")

	if lpkg.Types != nil {
		customNamedType := func(st jen.Statement, tt *types.Named) *jen.Statement {
			if tt.Obj().Name() == "QueryMod" && tt.Obj().Pkg().Path() == sqpkg {
				// sq.QueryMod => psql.SelectMod
				return st.Add(jen.Qual(sdialectpkg, sname+"Mod"))
			} else if tt.Obj().Name() == "QueryModApply" && tt.Obj().Pkg().Path() == sqpkg {
				// sq.QueryModApply => psql.SelectModApply
				return st.Add(jen.Qual(sdialectpkg, sname+"ModApply"))
			} else if tt.Obj().Name() == "Query" && tt.Obj().Pkg().Path() == isqpkg {
				// isq.Query => psql.SelectQuery
				return st.Add(jen.Qual(sdialectpkg, sname+"Query"))
			} else if tt.Obj().Pkg().Name() == "chain" && tt.Obj().Pkg().Path() == sqchainpkg {
				// sq/chain.From => FromChain
				return st.Add(jen.Id(fmt.Sprintf("%sChain", tt.Obj().Name())))
			} else if tt.Obj().Pkg().Path() == sqmodpkg {
				// sq/mod/InsertConflictUpdateMod => InsertConflictUpdateMod
				return st.Add(jen.Id(tt.Obj().Name()))
			}
			return nil
		}

		// qual := types.RelativeTo(lpkg.Types)
		scope := lpkg.Types.Scope()
		for _, name := range scope.Names() {
			obj := scope.Lookup(name)
			if !obj.Exported() {
				continue // skip unexported names
			}
			funcTyp, ok := obj.(*types.Func)
			if !ok {
				continue
			}

			found := false
			var doc *ast.CommentGroup

			for _, fileAst := range lpkg.Syntax {
				ast.Inspect(fileAst, func(n ast.Node) bool {
					if found {
						return false
					}
					if aFunc, ok := n.(*ast.FuncDecl); ok {
						if aFunc.Name.Name == funcTyp.Name() {
							found = true
							doc = aFunc.Doc
						}
					}
					return !found
				})
				if found {
					break
				}
			}

			sig := funcTyp.Type().(*types.Signature)
			// fmt.Printf("%s\n", types.ObjectString(funcTyp, qual))

			if sig.Results().Len() != 1 {
				return fmt.Errorf("function '%s' must have only 1 return value", name)
			}

			// don't generate root Query call
			sigResult := sig.Results().At(0)
			if sigResultType, stNamed := sigResult.Type().(*types.Named); stNamed {
				// fmt.Println(sigResultType.Obj().Name(), sigResultType.Obj().Pkg().Path())
				if sigResultType.Obj().Name() == "Query" && sigResultType.Obj().Pkg().Path() == sqpkg {
					continue
				}

				// detect chain return
				if sigResultType.Obj().Pkg().Name() == "chain" && sigResultType.Obj().Pkg().Path() == sqchainpkg {
					chains[sigResultType.Obj().Name()] = true
				}
			}

			// f.Comment(types.ObjectString(funcTyp, qual))
			if doc != nil {
				for _, docLine := range doc.List {
					f.Comment(docLine.Text)
				}
			}
			f.Func().Id(funcTyp.Name()).
				ParamsFunc(genutil.AddParams(sig.Params(), sig.Variadic(), customNamedType)).
				ParamsFunc(genutil.AddParams(sig.Results(), false, customNamedType)).
				Block(
					jen.Return(
						jen.Qual(ispkg, funcTyp.Name()).
							TypesFunc(func(tgroup *jen.Group) {
								for k := 0; k < sig.TypeParams().Len(); k++ {
									tgroup.Add(jen.Qual(sdialecttagpkg, sname+"Tag"))
								}
							}).
							CallFunc(func(pgroup *jen.Group) {
								for k := 0; k < sig.Params().Len(); k++ {
									sigParam := sig.Params().At(k)
									c := jen.Id(genutil.ParamName(k, sigParam))
									if sig.Variadic() && k == sig.Params().Len()-1 {
										c.Op("...")
									}
									pgroup.Add(c)
								}
							}),
					),
				)

			f.Line()
		}
	}

	fnfile := filepath.Join(smDir, "fn.go")
	if !*dryRun {
		// fmt.Println(fnfile)
		fnFile, err := os.Create(fnfile)
		if err != nil {
			return err
		}
		defer fnFile.Close()
		err = f.Render(fnFile)
	} else {
		fmt.Println(strings.Repeat("=", 10), fnfile, strings.Repeat("=", 10))
		// err = f.Render(os.Stdout)
		err = nil
	}
	if err != nil {
		return err
	}

	if len(chains) > 0 {
		chainNames := maps.Keys(chains)
		slices.Sort(chainNames)

		fchain := jen.NewFile(sdir)
		fchain.PackageComment("// Code generated by \"litsql\"; DO NOT EDIT.")

		for _, chain := range chainNames {
			fchain.Type().
				Id(chain+"Chain").
				Op("=").
				Qual(sqchainpkg, chain).Types(jen.Qual(sdialecttagpkg, sname+"Tag"))
			fchain.Line()
		}

		chainfile := filepath.Join(smDir, "chain.go")
		if !*dryRun {
			// fmt.Println(fnfile)
			chainFile, err := os.Create(chainfile)
			if err != nil {
				return err
			}
			defer chainFile.Close()
			err = fchain.Render(chainFile)
		} else {
			fmt.Println(strings.Repeat("=", 10), chainfile, strings.Repeat("=", 10))
			err = fchain.Render(os.Stdout)
			// err = nil
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func getCurrentDir() string {
	_, filename, _, ok := runtime.Caller(1)
	if !ok {
		panic("could not determine current directory")
	}
	return filepath.Dir(filename)
}
