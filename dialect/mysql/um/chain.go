// Code generated by "litsql-dialectgen"; DO NOT EDIT.
package um

import (
	litsql "github.com/rrgmc/litsql"
	tag "github.com/rrgmc/litsql/dialect/mysql/tag"
	ichain "github.com/rrgmc/litsql/internal/ichain"
	sq "github.com/rrgmc/litsql/sq"
)

type FromChain interface {
	sq.QueryMod[tag.UpdateTag]
	As(alias string, columns ...string) FromChain
	Lateral() FromChain
}

type JoinChain interface {
	sq.QueryMod[tag.UpdateTag]
	As(alias string, columns ...string) JoinChain
	Lateral() JoinChain
	Natural() JoinChain
	On(on string) JoinChain
	OnExpr(on litsql.Expression) JoinChain
	OnClause(query string, args ...any) JoinChain
	Using(using ...string) JoinChain
}

type WithChain interface {
	sq.QueryMod[tag.UpdateTag]
	Recursive() WithChain
	As(q litsql.Query) WithChain
}

// ensure interface is implemented by source type

var _ FromChain = (*ichain.FromChain[tag.UpdateTag, FromChain])(nil)

var _ JoinChain = (*ichain.JoinChain[tag.UpdateTag, JoinChain])(nil)

var _ WithChain = (*ichain.WithChain[tag.UpdateTag, WithChain])(nil)
