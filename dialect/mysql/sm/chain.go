// Code generated by "litsql-dialectgen"; DO NOT EDIT.
package sm

import (
	litsql "github.com/rrgmc/litsql"
	tag "github.com/rrgmc/litsql/dialect/mysql/tag"
	sq "github.com/rrgmc/litsql/sq"
)

type FromChain interface {
	sq.QueryMod[tag.SelectTag]
	As(alias string, columns ...string) FromChain
	Lateral() FromChain
}

type GroupByChain interface {
	sq.QueryMod[tag.SelectTag]
	With(with string) GroupByChain
}

type JoinChain interface {
	sq.QueryMod[tag.SelectTag]
	As(alias string, columns ...string) JoinChain
	Lateral() JoinChain
	Natural() JoinChain
	On(on string) JoinChain
	OnExpr(on litsql.Expression) JoinChain
	OnClause(query string, args ...any) JoinChain
	Using(using ...string) JoinChain
}

type WindowChain interface {
	sq.QueryMod[tag.SelectTag]
	From(name string) WindowChain
	PartitionBy(condition ...string) WindowChain
	PartitionByExpr(condition ...litsql.Expression) WindowChain
	OrderBy(order ...string) WindowChain
	OrderByExpr(order ...litsql.Expression) WindowChain
	Range() WindowChain
	Rows() WindowChain
	FromUnboundedPreceding() WindowChain
	FromPreceding(exp litsql.Expression) WindowChain
	FromCurrentRow() WindowChain
	FromFollowing(exp litsql.Expression) WindowChain
	ToPreceding(exp litsql.Expression) WindowChain
	ToCurrentRow(count int) WindowChain
	ToFollowing(exp litsql.Expression) WindowChain
	ToUnboundedFollowing() WindowChain
}

type WithChain interface {
	sq.QueryMod[tag.SelectTag]
	Recursive() WithChain
	As(q litsql.Query) WithChain
}
